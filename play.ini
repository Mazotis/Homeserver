; Playserver configuration file
; RPi3 related configurables
[SERVER]
; The RPI3 IP address
HOST = 000.000.000.000
; The RPI3 server port. Must be accessible thru firewall
PORT = 1111
; Allows to choose the VOICE commands type ("ifttt" commands or "dialogflow" Google app) and the port
VOICE_SERVER_TYPE = ifttt
VOICE_SERVER_PORT = 1234
; Enables file journaling
JOURNALING = True
; Journal files
JOURNAL_DIR = /some/dir
; Time to launch light-on events, in HH:mm format. Set to auto to get sunset time from EVENT_LOCALIZATION.
EVENT_HOUR = 18:00
; Get this code from https://weather.com/weather/today/l/(THIS IS THE CODE), when searching for your city.
EVENT_LOCALIZATION =
; Hour of day to start accepting TCP socket-based requests, in hh:mm format 
TCP_START_HOUR = 18:00
; Hour of day to start refusing TCP socket-based requests, in hh:mm format 
TCP_END_HOUR = 23:30
; Loads the tensorflow DNN apparatus and enables wifi-rtt requests (android app not yet published)
ENABLE_WIFI_RTT = false

; Device-on-lan IP detection and event triggering configurables
[DETECTOR]
; Local IPs to track status
TRACKED_IPS = 192.168.1.60,192.168.1.70
; Number of successful pings required to trigger an event change
; Needed because some devices do turn off and on their wifi from time to time
MAX_STATE_LEVEL = 2
; Ping frequency in seconds
PING_FREQ_SEC = 10
; Enables connection to a FIND3 Docker server (True/False)
FIND3_SERVER_ENABLE = True
; The FIND3 server address:port
FIND3_SERVER_URL = raspberrypi:8005
; The FIND3 given family name
FIND3_FAMILY_NAME = my-family
; The tracked devices, comma separated. They should correspond to the TRACKED_IPS list (first device correspond to first
; tracked IP, second device to second IP...). Devices that are not tracked by FIND3 should be named with a "_".
FIND3_TRACKED_DEVICES = _,my-device2
; Hours of day to start/stop device pinging, to allow mobile going to sleep or prevent unwanted actions.
START_HOUR = 06:00
END_HOUR = 23:00

[FIND3-PRESETS]
; FIND3 actions to run on device localized/exited room.
; Listed as: "LocationName = playclient-command-to-run"
; Or, if left room: "LocationName-off = playclient-command-to-run"
;
; AUTOMATIC_MODE = True runs all presets from this section as AUTO mode - which means they'll execute state changes
; on every device not actually on MANUAL mode. MANUAL has more priority over AUTO mode, and devices set in
; MANUAL mode (triggered by the command line script or via a preset in a AUTOMATIC_MODE = False category) will
; not be changed to AUTO until the --reset-mode command is sent
; Replaces priorities 2 (manual mode equivalent) and 3 (reset mode flag equivalent)
AUTOMATIC_MODE = True
livingroom = ./playclient.py --on --group living --subgroup lights
livingroom-off = ./playclient.py --off --notime --reset-mode --group living --subgroup lights

[TCP-PRESETS]
AUTOMATIC_MODE = True
livingon = ./playclient.py --on --group livingroom --subgroup lights
livingoff = ./playclient.py --off --group livingroom --subgroup lights

;  IFTTT server-related configurables
[IFTTT]
; Random SALT string. Your IFTTT Webhook should POST with a content_type application/x-www-form-urlencoded and a body:
; action=SOME_ACTION_STRING&hash=LOWERCAPS_SHA512_OF_SALT+ACTION
;
; Here you might want to set AUTOMATIC_MODE to False as these presets are executed by yourself vocally, and not by
; some automatic device... usually.
AUTOMATIC_MODE = False
SALT = asaltstring

; List actions below, as: ACTION = COMMAND_TO_RUN_ON_ACTION
some_action = ./playclient.py --off --notime --reset-mode --group agroup
some_other_action = ./playclient.py --tvon --reset-mode

; DIALOGFLOW server-related configurables. Not required if not used
[DIALOGFLOW]
; Dialogflow requires a HTTPS server. You can get free SSL certs and keys using the ACME script.
DIALOGFLOW_HTTPS_CERTS_KEY = /path/to/key.key
DIALOGFLOW_HTTPS_CERTS_CERT = /path/to/cert.cert
AUTOMATIC_MODE = False

; List of presets, listed as PRESET_NAME = Value_for_device0,Value_for_device1,Value_for_device2... 
; There should be as many list items as there are devices registered
[PRESETS]
AUTOMATIC_MODE = True
all_off = 0,0,0,0
all_on = 1,1,1,1

; Device configurations, listed as DEVICE0 ... DEVICE1 ... DEVICE#
; Available devices: Milight, Playbulb, DecoraSwitch
[DEVICE0]
TYPE = DecoraSwitch
; Name of device
NAME = A_Name
; Email address of MyLeviton account
EMAIL = aaa@aaa.com
; Password of MyLeviton account
PASSWORD = abcd
; Description of device
DESCRIPTION = Some Description
; Group(s) of devices (for example: same-room devices), comma separated
GROUP = agroup,asubgroup
; Default ON state intensity
DEFAULT_INTENSITY = 2

[DEVICE1]
TYPE = Playbulb
; BLE MAC address of playbulb device
ADDRESS = 00:11:22:33:44:55
DESCRIPTION = Some playbulb
GROUP = passage,lights
DEFAULT_INTENSITY = 05000000
; *Not required* Always skip the time check for this device. Can be applied to any device. Default = False
SKIPTIME = True
; *Not required* Always send a OFF request, even if the state is already OFF. Can be applied to any device. Default = True
FORCEOFF = True

[DEVICE2]
TYPE = Milight
; BLE MAC address of milight device
ADDRESS = 00:11:22:33:44:55
; For the following values, see https://github.com/moosd/ReverseEngineeredMiLightBluetooth/blob/master/getid.py
ID1 = 80
ID2 = 112
DESCRIPTION = Some milight
GROUP = passage,lights

[DEVICE3]
TYPE = GenericOnOff
; Name of device
NAME = HTPC
DESCRIPTION = living room HTPC
GROUP = livingroom,tv
; Some bash/sh command to run when device state should be ON
ON = /usr/bin/wakeonlan 00:11:22:33:AA:BB
; Some bash/sh command to run when device state should be OFF
OFF = ssh someuser@192.168.1.0 'sudo shutdown now'
; Some bash/sh command to run when device should be restarted
RESTART = ssh someuser@192.168.1.0 'sudo reboot'
; Some bash/sh command to run to check actual device state
STATE = ping 192.168.1.0 -c 1 -W 1
; If this following string is found in the output (stdout) of the STATE command, consider device as ON.
STATE_ON_EXPECT = 1 received
SKIPTIME = True
FORCEOFF = True
; IGNOREMODE = True allows state changes independent of the actual mode. Useful for devices that should not
; be triggered by some automatic detector.
IGNOREMODE = True

[DEVICE4]
TYPE = GenericOnOff
NAME = TV
DESCRIPTION = living room TV
GROUP = livingroom,tv
ON = echo 'on 0' | cec-client -s
OFF = echo 'standby 0' | cec-client -s
; If no restart command exists, set to nongthi
RESTART =
; If no command exists to find device state, set to nothing
STATE = echo 'pow 0' | cec-client -s
STATE_ON_EXPECT = power status: on
IGNOREMODE = True

[DEVICE5]
TYPE = GenericOnOff
NAME = Sound-system
DESCRIPTION = Living room sound station
GROUP = livingroom,tv
ON = irsend SEND_ONCE some-device POWER
OFF = irsend SEND_ONCE some-device POWER
STATE =
STATE_ON_EXPECT =
RESTART = None
SKIPTIME = True
FORCEOFF = False
IGNOREMODE = True

[DEVICE6]
TYPE = MerossSwitch
ADDRESS = 00:11:22:33:44:55
EMAIL = your@email.com
PASSWORD = your_password
DESCRIPTION = Some description
GROUP = livingroom,lights

[DEVICE7]
TYPE = TPLinkSwitch
NAME = some_room
; The device IP address as found in the TP Link mobile app after configuration
IP = 192.168.1.000 
DESCRIPTION = Smart switch in some room
GROUP = lights,room_name